x-environment: &default-env
  JWT_SECRET: "myXSuperXSecretXKeyX32charsMinmyXSuperXSecretXKeyX32charsMinX2"

services:
  db-users:
    image: mysql:8.0
    container_name: db-users
    environment:
      MYSQL_DATABASE: usersdb
      MYSQL_USER: usersuser
      MYSQL_PASSWORD: userspass
      MYSQL_ROOT_PASSWORD: rootpass
    ports:
      - "3310:3306"
    networks:
      - database-net
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 2s
      timeout: 2s
      retries: 10

  db-accounts:
    image: mysql:8.0
    container_name: db-accounts
    environment:
      MYSQL_DATABASE: accountsdb
      MYSQL_USER: accountsuser
      MYSQL_PASSWORD: accountspass
      MYSQL_ROOT_PASSWORD: rootpass
    ports:
      - "3311:3306"
    networks:
      - database-net
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 2s
      timeout: 2s
      retries: 10

  db-transactions:
    image: mysql:8.0
    container_name: db-transactions
    environment:
      MYSQL_DATABASE: transactionsdb
      MYSQL_USER: txuser
      MYSQL_PASSWORD: txpass
      MYSQL_ROOT_PASSWORD: rootpass
    ports:
      - "3312:3306"
    networks:
      - database-net
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 2s
      timeout: 2s
      retries: 10

  auth:
    build: ./backend/authenticator
    container_name: ${AUTHENTICATOR_CONTAINER_NAME}
    image: auth-service:1.0
    ports:
      - ${AUTH_HOST_PORT}:${AUTH_CONTAINER_PORT}
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - MS_USERS_BASE_URL=${MS_USERS_BASE_URL}
      - MS_USERS_CREDENTIALS=${MS_USERS_CREDENTIALS}
      - x-environment
      - CREDENTIALS_USER=USER_SECRET_REST
      - CREDENTIALS_PASS=PASS_SECRET_REST
    networks:
      - backend-net

  users:
    build:
      context: ./backend/users
      dockerfile: Dockerfile
    container_name: ${USERS_CONTAINER_NAME}
    image: users-service:1.0
    ports:
      - ${USERS_HOST_PORT}:${USERS_CONTAINER_PORT}
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DB_URL=${DB_USERS_URL}
      - DB_DRIVER=${DB_USERS_DRIVER}
      - DB_USER=${DB_USERS_USER}
      - DB_PASSWORD=${DB_USERS_PASS}
      - CREDENTIALS_USER=${USERS_CREDENTIALS_USER}
      - CREDENTIALS_PASS=${USERS_CREDENTIALS_PASS}
    depends_on:
      db-users:
        condition: service_healthy
    networks:
     - backend-net
     - database-net

  accounts:
    build: ./backend/accounts
    container_name: ${ACCOUNTS_CONTAINER_NAME}
    image: accounts-service:1.0
    ports:
      - ${ACCOUNTS_HOST_PORT}:${ACCOUNTS_CONTAINER_PORT}
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DB_URL=${DB_ACCOUNTS_URL}
      - DB_DRIVER=${DB_ACCOUNTS_DRIVER}
      - DB_USER=${DB_ACCOUNTS_USER}
      - DB_PASSWORD=${DB_ACCOUNTS_PASS}
      - CREDENTIALS_USER=${ACCOUNTS_CREDENTIALS_USER}
      - CREDENTIALS_PASS=${ACCOUNTS_CREDENTIALS_PASS}
    depends_on:
      db-accounts:
        condition: service_healthy
    networks:
      - backend-net
      - database-net

  transactions:
    build: ./backend/transacciones
    container_name: ${TRANSACTIONS_CONTAINER_NAME}
    image: transacciones-service:1.0
    ports:
      - ${TRANSACTIONS_HOST_PORT}:${TRANSACTIONS_CONTAINER_PORT}
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DB_URL=${DB_TRANSACTIONS_URL}
      - DB_DRIVER=${DB_TRANSACTIONS_DRIVER}
      - DB_USER=${DB_TRANSACTIONS_USER}
      - DB_PASSWORD=${DB_TRANSACTIONS_PASS}
      - CREDENTIALS_USER=${TRANSACTIONS_CREDENTIALS_USER}
      - CREDENTIALS_PASS=${TRANSACTIONS_CREDENTIALS_PASS}
    depends_on:
      db-transactions:
        condition: service_healthy
    networks:
      - backend-net
      - database-net


networks:
  backend-net:
    driver: bridge
    name: ${BACKEND_NET_NAME}
  database-net:
    driver: bridge

